/***********************************************************************
Application - Base class for Vrui application objects.
Copyright (c) 2004-2013 Oliver Kreylos

This file is part of the Virtual Reality User Interface Library (Vrui).

The Virtual Reality User Interface Library is free software; you can
redistribute it and/or modify it under the terms of the GNU General
Public License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

The Virtual Reality User Interface Library is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with the Virtual Reality User Interface Library; if not, write to the
Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA
***********************************************************************/

#ifndef VRUI_APPLICATION_INCLUDED
#define VRUI_APPLICATION_INCLUDED

#include <iostream>
#include <stdexcept>
#include <Vrui/ToolManager.h>
#include <Vrui/Tool.h>

/* Forward declarations: */
namespace Misc {
class CallbackData;
}
class GLContextData;
class ALContextData;

namespace Vrui {

class Application
	{
	/* Embedded classes: */
	public:
	class ToolBase // Base mix-in class for application tools
		{
		/* Constructors and destructors: */
		public:
		ToolBase(void)
			{
			}
		virtual ~ToolBase(void)
			{
			}
		
		/* Methods: */
		virtual void setApplication(Application* sApplication) =0; // Sets the tool's application pointer
		};
	
	template <class DerivedApplicationParam>
	class Tool:public ToolBase // Base class for tools that need to link back to the application object owning them
		{
		/* Embedded classes: */
		public:
		typedef DerivedApplicationParam DerivedApplication; // The derived application class
		
		/* Elements: */
		protected:
		DerivedApplication* application; // Pointer to the application object owning this tool
		
		/* Constructors and destructors: */
		public:
		Tool(void)
			:application(0)
			{
			}
		
		/* Methods from ToolBase: */
		virtual void setApplication(Application* sApplication)
			{
			application=dynamic_cast<DerivedApplication*>(sApplication);
			}
		};
	
	typedef unsigned int EventID; // Type to distinguish separate event tool events using a single callback method
	
	private:
	template <class DerivedApplicationParam>
	class EventTool; // Forward declaration for simple event tools
	
	template <class DerivedApplicationParam>
	class EventToolFactory:public ToolFactory // Factory class to create simple event tools
		{
		friend class EventTool<DerivedApplicationParam>;
		
		/* Embedded classes: */
		public:
		typedef DerivedApplicationParam DerivedApplication; // The derived application class
		typedef void (DerivedApplicationParam::*EventCallbackMethod)(EventID eventId,InputDevice::ButtonCallbackData* cbData); // Type for event callbacks called if an event happens
		typedef EventTool<DerivedApplicationParam> CreatedTool; // Type of tools created by this factory
		
		/* Elements: */
		private:
		std::string displayName; // Display name for tools of this class
		DerivedApplication* application; // Pointer to the application object
		EventCallbackMethod eventCallbackMethod; // Method called on the application object when an event is generated
		EventID eventId; // Event ID generated by tools of this class
		
		/* Constructors and destructors: */
		public:
		EventToolFactory(const char* sClassName,const char* sDisplayName,ToolFactory* parentClass,DerivedApplication* sApplication,EventCallbackMethod sEventCallbackMethod,EventID sEventId); // Creates simple event tool factory
		private:
		EventToolFactory(const EventToolFactory& source); // Prohibit copy constructor
		EventToolFactory& operator=(const EventToolFactory& source); // Prohibit assignment operator
		public:
		virtual ~EventToolFactory(void); // Destroys the tool factory
		
		/* Methods from ToolFactory: */
		virtual const char* getName(void) const;
		virtual const char* getButtonFunction(int buttonSlotIndex) const;
		virtual Vrui::Tool* createTool(const ToolInputAssignment& inputAssignment) const;
		virtual void destroyTool(Vrui::Tool* tool) const;
		};
	
	template <class DerivedApplicationParam>
	class EventTool:public Vrui::Tool // Helper class for very simple event tools, basically as a shortcut for key bindings
		{
		/* Embedded classes: */
		private:
		typedef EventToolFactory<DerivedApplicationParam> Factory; // Type of factory class
		
		/* Elements: */
		private:
		const Factory* factory; // Pointer to the tool factory object
		
		/* Constructors and destructors: */
		public:
		EventTool(const ToolFactory* sFactory,const ToolInputAssignment& inputAssignment); // Creates an event tool
		
		/* Methods from Tool: */
		virtual const ToolFactory* getFactory(void) const;
		virtual std::string getName(void) const;
		virtual void buttonCallback(int buttonSlotIndex,InputDevice::ButtonCallbackData* cbData);
		};
	
	/* Elements: */
	unsigned int nextEventToolClassIndex; // Index to generate unique simple event tool classes
	
	/* Private methods: */
	static void frameWrapper(void* userData);
	static void displayWrapper(GLContextData& contextData,void* userData);
	static void soundWrapper(ALContextData& contextData,void* userData);
	char* createEventToolClassName(void);
	
	/* Protected methods: */
	protected:
	template <class DerivedApplicationParam>
	void addEventTool(const char* toolName,ToolFactory* parentClass,DerivedApplicationParam* application,typename EventToolFactory<DerivedApplicationParam>::EventCallbackMethod eventCallbackMethod,EventID eventId); // Generates a new simple event tool class
	void addEventTool(const char* toolName,ToolFactory* parentClass,EventID eventId); // Ditto, using the eventCallback virtual method
	
	/* Constructors and destructors: */
	public:
	Application(int& argc,char**& argv,char**& appDefaults); // Initializes Vrui environment
	Application(int& argc,char**& argv); // Ditto, using a NULL appDefaults pointer
	virtual ~Application(void);
	
	/* Methods: */
	void run(void); // Runs Vrui main loop
	
	/* Methods to be overridden by derived classes to insert functionality into Vrui's main loop: */
	virtual void toolCreationCallback(ToolManager::ToolCreationCallbackData* cbData); // Called when the tool manager creates a new tool
	virtual void toolDestructionCallback(ToolManager::ToolDestructionCallbackData* cbData); // Called when the tool manager destroys a tool
	virtual void frame(void); // Synchronization method called exactly once per frame
	virtual void display(GLContextData& contextData) const; // Rendering method called at least once per window per frame, potentially concurrently from background thread(s)
	virtual void sound(ALContextData& contextData) const; // Sound rendering method called at least once per sound context per frame, potentially concurrently from background thread(s)
	virtual void eventCallback(EventID eventId,InputDevice::ButtonCallbackData* cbData); // Default callback method for simple event tools
	};

}

/***********************************************************************
Define a macro to create an application object of arbitrary type, run
it, and catch any exceptions:
***********************************************************************/

#define VRUI_APPLICATION_RUN(AppClass) \
	int main(int argc,char* argv[]) \
		{ \
		try \
			{ \
			AppClass app(argc,argv); \
			app.run(); \
			} \
		catch(std::runtime_error err) \
			{ \
			std::cerr<<"Terminated "<<#AppClass<<" due to exception: "<<err.what()<<std::endl; \
			return 1; \
			} \
		catch(...) \
			{ \
			std::cerr<<"Terminated "<<#AppClass<<" due to spurious exception"<<std::endl; \
			return 2; \
			} \
		return 0; \
		}

#ifndef VRUI_APPLICATION_IMPLEMENTATION
#include <Vrui/Application.icpp>
#endif

#endif
