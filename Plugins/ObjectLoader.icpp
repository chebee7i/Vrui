/***********************************************************************
ObjectLoader - Light-weight class to load objects from dynamic shared
objects.
Copyright (c) 2009-2010 Oliver Kreylos

This file is part of the Plugin Handling Library (Plugins).

The Plugin Handling Library is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Plugin Handling Library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the Plugin Handling Library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#define PLUGINS_OBJECTLOADER_IMPLEMENTATION

#include <Plugins/ObjectLoader.h>

#include <stdio.h>
#include <dlfcn.h>
#include <Misc/ThrowStdErr.h>

#include <Plugins/FunctionPointerHack.h>

namespace Plugins {

/*****************************
Methods of class ObjectLoader:
*****************************/

template <class ManagedClassParam>
inline
ObjectLoader<ManagedClassParam>::ObjectLoader(
	std::string sDsoNameTemplate)
	:dsoNameTemplate(sDsoNameTemplate),
	 dsoStates(17)
	{
	/* Split the DSO name template into base directory and file name and check it for validity: */
	std::string::iterator templateStart=sDsoNameTemplate.begin();
	bool haveClassname=false;
	for(std::string::iterator sIt=sDsoNameTemplate.begin();sIt!=sDsoNameTemplate.end();++sIt)
		{
		if(*sIt=='/'&&!haveClassname) // Find the last slash before the %s placeholder
			templateStart=sIt+1;
		else if(*sIt=='%') // Check for invalid placeholders
			{
			++sIt;
			if(sIt==sDsoNameTemplate.end()||*sIt!='s'||haveClassname)
				Misc::throwStdErr("ObjectLoader::ObjectLoader: Invalid DSO name template %s",sDsoNameTemplate.c_str());
			else
				haveClassname=true;
			}
		}
	if(!haveClassname)
		Misc::throwStdErr("ObjectLoader::ObjectLoader: Invalid DSO name template %s",sDsoNameTemplate.c_str());
	
	/* Split the template into base directory and file name: */
	dsoNameTemplate=std::string(templateStart,sDsoNameTemplate.end());
	
	/* Store the base directory in the file locator: */
	if(templateStart!=sDsoNameTemplate.begin())
		dsoLocator.addPath(std::string(sDsoNameTemplate.begin(),templateStart));
	}

template <class ManagedClassParam>
inline
ObjectLoader<ManagedClassParam>::~ObjectLoader(
	void)
	{
	/* Destroy all objects and unload all DSOs: */
	for(typename DsoStateHasher::Iterator dsIt=dsoStates.begin();!dsIt.isFinished();++dsIt)
		{
		/* Destroy the object: */
		dsIt->getDest().destroyObjectFunction(dsIt->getSource());
		
		/* Close the DSO: */
		if(dsIt->getDest().dsoHandle!=0)
			dlclose(dsIt->getDest().dsoHandle);
		}
	}

template <class ManagedClassParam>
inline
typename ObjectLoader<ManagedClassParam>::ManagedClass*
ObjectLoader<ManagedClassParam>::createObject(
	const char* className)
	{
	/* Construct the DSO name from the given class name: */
	char dsoName[256];
	snprintf(dsoName,sizeof(dsoName),dsoNameTemplate.c_str(),className);
	
	/* Locate and open the DSO containing the class implementation: */
	DsoState dsoState;
	try
		{
		std::string fullDsoName=dsoLocator.locateFile(dsoName);
		dsoState.dsoHandle=dlopen(fullDsoName.c_str(),RTLD_LAZY|RTLD_GLOBAL);
		}
	catch(std::runtime_error err)
		{
		/* Re-throw the error as a DSO error: */
		throw DsoError(err.what());
		}
	
	/* Check if DSO handle is valid: */
	if(dsoState.dsoHandle==0)
		throw DsoError(dlerror());
	
	/* Get address of factory creation function: */
	CreateObjectFunction createObjectFunction=CreateObjectFunction(nowarninghack_dlsym(dsoState.dsoHandle,"createObject"));
	if(createObjectFunction==0)
		throw DsoError(dlerror());
	
	/* Get address of factory destruction function: */
	dsoState.destroyObjectFunction=DestroyObjectFunction(nowarninghack_dlsym(dsoState.dsoHandle,"destroyObject"));
	if(dsoState.destroyObjectFunction==0)
		throw DsoError(dlerror());
	
	/* Create the object: */
	ManagedClass* result=createObjectFunction(*this);
	
	/* Store the object's DSO state: */
	dsoStates.setEntry(typename DsoStateHasher::Entry(result,dsoState));
	
	return result;
	}


template <class ManagedClassParam>
inline
void
ObjectLoader<ManagedClassParam>::destroyObject(
	typename ObjectLoader<ManagedClassParam>::ManagedClass* object)
	{
	/* Find the object's DSO state: */
	typename DsoStateHasher::Iterator dsIt=dsoStates.findEntry(object);
	if(dsIt.isFinished())
		Misc::throwStdErr("ObjectLoader::destroyObject: DSO state not found");
	
	/* Destroy the object: */
	dsIt->getDest().destroyObjectFunction(object);
	
	/* Close the DSO: */
	if(dsIt->getDest().dsoHandle!=0)
		dlclose(dsIt->getDest().dsoHandle);
	
	/* Remove the object's DSO state: */
	dsoStates.removeEntry(dsIt);
	}

}
